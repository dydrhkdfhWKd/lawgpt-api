# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DEmDEvChjjLAZQs3LqTp0K0m0iGmb9QF
"""

from flask import Flask, request, Response
import xml.etree.ElementTree as ET
from urllib.request import urlopen
from urllib.parse import quote
import json

app = Flask(__name__)

@app.route('/')
def home():
    return "🔥 LawGPT 서버 실행 중입니다!"

@app.route('/law_search', methods=['GET'])
def law_search():
    query = request.args.get('query')
    if not query:
        return Response(json.dumps({"error": "쿼리를 입력해주세요."}, ensure_ascii=False),
                        content_type="application/json; charset=utf-8")

    try:
        # ✅ query에서 키워드 분리 (첫 번째: 문서검색, 나머지: 조문 필터링)
        keywords = query.strip().split()
        if not keywords:
            raise ValueError("쿼리에 키워드가 없습니다.")

        primary_keyword = keywords[0]
        filter_keywords = keywords[1:]

        encoded_query = quote(primary_keyword)
        url = f"http://www.law.go.kr/DRF/lawSearch.do?target=admrul&OC=gogohakj1558&type=XML&query={encoded_query}"
        response = urlopen(url).read()
        xtree = ET.fromstring(response)

        results = []
        for item in xtree.findall("법령"):
            law_id = item.findtext("법령ID")
            if not law_id:
                continue

            law_url = f"http://www.law.go.kr/DRF/lawService.do?OC=gogohakj1558&target=admrul&ID={law_id}&type=XML"
            law_response = urlopen(law_url).read()
            law_tree = ET.fromstring(law_response)

            law_title = law_tree.findtext("법령명한글", default="알 수 없음")

            for clause in law_tree.findall(".//조문내용"):
                if clause.text:
                    text = clause.text.strip()
                    # ✅ 필터 키워드가 모두 포함된 조문만 추출
                    if all(k in text for k in filter_keywords):
                        results.append({
                            "title": law_title,
                            "content": text
                        })

        if not results:
            return Response(json.dumps({"message": "해당 키워드를 포함한 조문을 찾을 수 없습니다."}, ensure_ascii=False),
                            content_type="application/json; charset=utf-8")

        return Response(json.dumps(results, ensure_ascii=False),
                        content_type="application/json; charset=utf-8")

    except Exception as e:
        return Response(json.dumps({
            "error": "예기치 못한 오류가 발생했습니다.",
            "details": str(e)
        }, ensure_ascii=False),
            content_type="application/json; charset=utf-8")